abort()		@@-- [func] (cfgutils)
acc_db_request(comment, table)		@@-- [func] (acc)
acc_diam_request(comment)		@@-- [func] (acc)
acc_log_request(comment)		@@-- [func] (acc)
acc_rad_request(comment)		@@-- [func] (acc)
acc_rad_request(comment)		@@-- [func] (acc_radius)
add_contact_alias([ip_addr, port, proto])		@@-- [func] (nathelper)
add_diversion(reason [, uri])		@@-- [func] (diversion)
add_path()		@@-- [func] (path)
add_path(user)		@@-- [func] (path)
add_path(user, parameters)		@@-- [func] (path)
add_path_received()		@@-- [func] (path)
add_path_received(user)		@@-- [func] (path)
add_path_received(user, parameters)		@@-- [func] (path)
add_rcv_param([flag]),		@@-- [func] (nathelper)
add_rr_param(param)		@@-- [func] (rr)
add_sock_hdr(hdr_name)		@@-- [func] (registrar)
add_uri_param(param)		@@-- [func] (siputils)
alias_db_lookup(table_name)		@@-- [func] (alias_db)
allow_address(group_id, ip_addr_pvar, port_pvar)		@@-- [func] (permissions)
allow_address_group(addr, port)		@@-- [func] (permissions)
allow_register(allow_file, deny_file)		@@-- [func] (permissions)
allow_register(basename)		@@-- [func] (permissions)
allow_routing()		@@-- [func] (permissions)
allow_routing(allow_file,deny_file)		@@-- [func] (permissions)
allow_routing(basename)		@@-- [func] (permissions)
allow_source_address([group_id])		@@-- [func] (permissions)
allow_source_address_group()		@@-- [func] (permissions)
allow_trusted([src_ip_pvar, proto_pvar])		@@-- [func] (permissions)
allow_uri(basename, pvar)		@@-- [func] (permissions)
append_attr_hf(header_name, $avp_name)		@@-- [func] (avp)
append_attr_hf(name)		@@-- [func] (avp)
append_body_part(txt,content_type[, content_disposition])		@@-- [func] (textops)
append_branch([ uri, [ q ] ])		@@-- [func] (corex)
append_hf(txt[, hdr])		@@-- [func] (textops)
append_hf_value(hf, hvalue)		@@-- [func] (textopsx)
append_rpid_hf()		@@-- [func] (siputils)
append_rpid_hf(prefix, suffix)		@@-- [func] (siputils)
append_time()		@@-- [func] (textops)
append_time_to_request()		@@-- [func] (textops)
append_to_reply(txt)		@@-- [func] (textops)
append_urihf(prefix, suffix)		@@-- [func] (textops)
assign_hf_value(hf, hvalue)		@@-- [func] (textopsx)
assign_hf_value2(hf, hvalue)		@@-- [func] (textopsx)
assign_server_unreg(aysnc_reply_route, domain, direction)		@@-- [func] (ims_registrar_scscf)
async_route(routename, seconds)		@@-- [func] (async)
async_sleep(seconds)		@@-- [func] (async)
async_task_route(routename)		@@-- [func] (async)
attr2uri($attribute[,uri-part])		@@-- [func] (avp)
attr_destination($avp_name)		@@-- [func] (avp)
attr_equals(attribute, value)		@@-- [func] (avp)
attr_equals_xl(attribute, xl_format)		@@-- [func] (avp)
attr_exists(attribute)		@@-- [func] (avp)
attr_to_reply(header_name, $avp_name)		@@-- [func] (avp)
attr_to_reply(name)		@@-- [func] (avp)
autheph_authenticate(username, password)		@@-- [func] (auth_ephemeral)
autheph_check(realm)		@@-- [func] (auth_ephemeral)
autheph_check_from([username])		@@-- [func] (auth_ephemeral)
autheph_check_timestamp(username)		@@-- [func] (auth_ephemeral)
autheph_check_to([username])		@@-- [func] (auth_ephemeral)
autheph_proxy(realm)		@@-- [func] (auth_ephemeral)
autheph_www(realm[, method])		@@-- [func] (auth_ephemeral)
auth_add_identity()		@@-- [func] (auth_identity)
auth_challenge(realm, flags)		@@-- [func] (auth)
auth_check(realm, table, flags)		@@-- [func] (auth_db)
auth_date_proc()		@@-- [func] (auth_identity)
auth_get_www_authenticate(realm, flags, pvdest)		@@-- [func] (auth)
auth_xkeys_add(hdr, kid, alg, data)		@@-- [func] (auth_xkeys)
auth_xkeys_check(hdr, kid, alg, data)		@@-- [func] (auth_xkeys)
avp_check(name,op_value)		@@-- [func] (avpops)
avp_copy(old_name,new_name)		@@-- [func] (avpops)
avp_db_delete(source,name)		@@-- [func] (avpops)
avp_db_load(source,name)		@@-- [func] (avpops)
avp_db_query(query[,dest])		@@-- [func] (avpops)
avp_db_store(source,name)		@@-- [func] (avpops)
avp_delete(name)		@@-- [func] (avpops)
avp_op(name,op_value)		@@-- [func] (avpops)
avp_print()		@@-- [func] (avpops)
avp_printf(dest, format)		@@-- [func] (avpops)
avp_pushto(destination,name)		@@-- [func] (avpops)
avp_subst(avps, subst)		@@-- [func] (avpops)
bla_handle_notify		@@-- [func] (pua_bla)
bla_set_flag		@@-- [func] (pua_bla)
blst_add([timeout])		@@-- [func] (blst)
blst_add_retry_after(min, max)		@@-- [func] (blst)
blst_clear_ignore([flags])		@@-- [func] (blst)
blst_del()		@@-- [func] (blst)
blst_is_blacklisted()		@@-- [func] (blst)
blst_rpl_clear_ignore([flags])		@@-- [func] (blst)
blst_rpl_set_ignore([flags])		@@-- [func] (blst)
blst_set_ignore([flags])		@@-- [func] (blst)
bm_log_timer(name)		@@-- [func] (benchmark)
bm_start_timer(name)		@@-- [func] (benchmark)
call_control()		@@-- [func] (call_control)
can_publish_reg(domain)		@@-- [func] (ims_registrar_scscf)
can_subscribe_to_reg(domain)		@@-- [func] (ims_registrar_scscf)
cass_insert(keyspace, column_family, key, column, value)		@@-- [func] (ndb_cassandra)
cass_retrieve(keyspace, column_family, key, column, value)		@@-- [func] (ndb_cassandra)
change_reply_status(code, reason)		@@-- [func] (textopsx)
checkcallingtranslation()		@@-- [func] (osp)
checkospheader()		@@-- [func] (osp)
checkosproute()		@@-- [func] (osp)
check_blacklist ([string table])		@@-- [func] (userblacklist)
check_from()		@@-- [func] (uid_uri_db)
check_from()		@@-- [func] (uri_db)
check_route_exists(route)		@@-- [func] (cfgutils)
check_route_param(re)		@@-- [func] (rr)
check_to()		@@-- [func] (uid_uri_db)
check_to()		@@-- [func] (uri_db)
check_user_blacklist (string user, string domain, string number, string table)		@@-- [func] (userblacklist)
check_user_whitelist (string user, string domain, string number, string table)		@@-- [func] (userblacklist)
check_whitelist (string table)		@@-- [func] (userblacklist)
cmp_aor(str1, str2)		@@-- [func] (siputils)
cmp_istr(str1, str2)		@@-- [func] (textops)
cmp_str(str1, str2)		@@-- [func] (textops)
cmp_uri(str1, str2)		@@-- [func] (siputils)
cnt_add([group.]name, number)		@@-- [func] (counters)
cnt_inc([group.]name)		@@-- [func] (counters)
cnt_reset([group.]name)		@@-- [func] (counters)
cnxcc_set_max_channel()		@@-- [func] (cnxcc)
cnxcc_set_max_credit()		@@-- [func] (cnxcc)
cnxcc_set_max_time()		@@-- [func] (cnxcc)
cnxcc_terminate_all()		@@-- [func] (cnxcc)
cnxcc_update_max_time()		@@-- [func] (cnxcc)
Common requirements		@@-- [func] (app_java)
compare_ips (ip1, ip2)		@@-- [func] (ipops)
compare_pure_ips (ip1, ip2)		@@-- [func] (ipops)
consume_credentials()		@@-- [func] (auth)
core_hash(string1, string2, size)		@@-- [func] (cfgutils)
cpl_process_register()		@@-- [func] (cpl-c)
cpl_process_register_norpl()		@@-- [func] (cpl-c)
cpl_run_script(type,mode, [uri])		@@-- [func] (cpl-c)
cr_next_domain(carrier, domain, prefix_matching, host, reply_code, dstavp)		@@-- [func] (carrierroute)
cr_nofallback_route(carrier, domain, prefix_matching, rewrite_user, hash_source, descavp)		@@-- [func] (carrierroute)
cr_route(carrier, domain, prefix_matching, rewrite_user, hash_source, descavp)		@@-- [func] (carrierroute)
cr_user_carrier(user, domain, dstavp)		@@-- [func] (carrierroute)
curl_connect(connection, url, [content_type, data,] result)		@@-- [func] (curl)
curl_http_query(url, [post-data], result)		@@-- [func] (curl)
dbg_breakpoint(mode)		@@-- [func] (debugger)
dbg_pv_dump([mask] [, level])		@@-- [func] (debugger)
dbg_sip_msg([log_level], [facility])		@@-- [func] (debugger)
decode_contact()		@@-- [func] (mangler)
decode_contact()		@@-- [func] (siputils)
decode_contact_header()		@@-- [func] (mangler)
decode_contact_header()		@@-- [func] (siputils)
defunct_gw(period)		@@-- [func] (lcr)
del_attr($avp_name)		@@-- [func] (avp)
diameter_is_user_in(who, group)		@@-- [func] (auth_diameter)
diameter_proxy_authorize(realm)		@@-- [func] (auth_diameter)
diameter_www_authorize(realm)		@@-- [func] (auth_diameter)
dispatch_rpc()		@@-- [func] (xmlrpc)
dispatch_xhttp_pi()		@@-- [func] (xhttp_pi)
dispatch_xhttp_rpc()		@@-- [func] (xhttp_rpc)
dlg_bridge(from, to, op)		@@-- [func] (dialog)
dlg_bridge(from, to, op)		@@-- [func] (dialog_ng)
dlg_bye(side)		@@-- [func] (dialog)
dlg_get(callid, ftag, ttag)		@@-- [func] (dialog)
dlg_get(callid, ftag, ttag)		@@-- [func] (dialog_ng)
dlg_isflagset(flag)		@@-- [func] (dialog)
dlg_isflagset(flag)		@@-- [func] (dialog_ng)
dlg_manage()		@@-- [func] (dialog)
dlg_manage()		@@-- [func] (dialog_ng)
dlg_refer(side, address)		@@-- [func] (dialog)
dlg_refer(side, address)		@@-- [func] (dialog_ng)
dlg_remote_profile(cmd, profile, value, uid, expires)		@@-- [func] (dialog)
dlg_resetflag(flag)		@@-- [func] (dialog)
dlg_resetflag(flag)		@@-- [func] (dialog_ng)
dlg_setflag(flag)		@@-- [func] (dialog)
dlg_setflag(flag)		@@-- [func] (dialog_ng)
dlg_set_property(attr)		@@-- [func] (dialog)
dlg_set_timeout(timeout [, h_entry, h_id])		@@-- [func] (dialog)
dlg_set_timeout_by_profile(profile, [value], timeout)		@@-- [func] (dialog)
dlg_terminate		@@-- [func] (dialog_ng)
dmq_bcast_message(peer, body, content_type)		@@-- [func] (dmq)
dmq_handle_message()		@@-- [func] (dmq)
dmq_is_from_node()		@@-- [func] (dmq)
dmq_send_message(peer, node, body, content_type)		@@-- [func] (dmq)
dmq_t_replicate([skip_loop_test])		@@-- [func] (dmq)
dns_int_match_ip(hostname, ipaddr)		@@-- [func] (ipops)
dns_query(hostname, pvid)		@@-- [func] (ipops)
dns_sys_match_ip(hostname, ipaddr)		@@-- [func] (ipops)
does_uri_exist()		@@-- [func] (uid_uri_db)
does_uri_exist()		@@-- [func] (uri_db)
do_routing("[groupID]")		@@-- [func] (drouting)
dp_apply_policy()		@@-- [func] (domainpolicy)
dp_can_connect()		@@-- [func] (domainpolicy)
dp_translate(id, [src[/dest]])		@@-- [func] (dialplan)
ds_is_from_list([groupid [, mode [, uri] ] ])		@@-- [func] (dispatcher)
ds_list_exist(groupid)		@@-- [func] (dispatcher)
ds_load_unset()		@@-- [func] (dispatcher)
ds_load_update()		@@-- [func] (dispatcher)
ds_mark_dst([state])		@@-- [func] (dispatcher)
ds_next_domain()		@@-- [func] (dispatcher)
ds_next_dst()		@@-- [func] (dispatcher)
ds_select_domain(set, alg[, limit])		@@-- [func] (dispatcher)
ds_select_dst(set, alg[, limit])		@@-- [func] (dispatcher)
dump_attrs()		@@-- [func] (avp)
encode_contact(encoding_prefix)		@@-- [func] (mangler)
encode_contact(encoding_prefix,hostpart)		@@-- [func] (siputils)
end_media_session()		@@-- [func] (mediaproxy)
engage_media_proxy()		@@-- [func] (mediaproxy)
enum_pv_query("pvar"[,"suffix"[,"service"]])		@@-- [func] (enum)
enum_query(["suffix"[,"service"]])		@@-- [func] (enum)
erl_reg_send(server,msg)		@@-- [func] (erlang)
erl_reply(msg)		@@-- [func] (erlang)
erl_rpc(mod,fun,args,reply)		@@-- [func] (erlang)
erl_send(pid,msg)		@@-- [func] (erlang)
Error Handling		@@-- [func] (janssonrpc-c)
evapi_async_relay(evdata)		@@-- [func] (evapi)
evapi_close()		@@-- [func] (evapi)
evapi_relay(evdata)		@@-- [func] (evapi)
exclude_hf_value(hf, hvalue)		@@-- [func] (textopsx)
exec_avp(command [, avplist])		@@-- [func] (exec)
exec_dset(command)		@@-- [func] (exec)
exec_msg(command)		@@-- [func] (exec)
file_read(fpath, var)		@@-- [func] (corex)
file_write(fpath, content)		@@-- [func] (corex)
filter_body(content_type)		@@-- [func] (textops)
fix_nated_contact()		@@-- [func] (nathelper)
fix_nated_register()		@@-- [func] (nathelper)
fix_nated_sdp(flags [, ip_address])		@@-- [func] (nathelper)
flags2attr("$avp")		@@-- [func] (avp)
fnmatch(value, expr [, flags])		@@-- [func] (textopsx)
from_any_gw([ip_addr, proto])		@@-- [func] (lcr)
from_gw(lcr_id[, ip_addr, proto])		@@-- [func] (lcr)
geoip2_match(ipaddr, pvc)		@@-- [func] (geoip2)
geoip_match(ipaddr, pvc)		@@-- [func] (geoip)
get_body_part(content_type, opv)		@@-- [func] (textops)
get_body_part_raw(content_type, opv)		@@-- [func] (textops)
get_profile_size(profile,[value],size)		@@-- [func] (dialog)
get_profile_size(profile,[value],size)		@@-- [func] (dialog_ng)
get_redirects(max)		@@-- [func] (uac_redirect)
get_redirects(max,reason)		@@-- [func] (uac_redirect)
get_uri_param(name, var)		@@-- [func] (siputils)
get_user_group(URI, AVP)		@@-- [func] (group)
goes_to_gw([type])		@@-- [func] (drouting)
h350_auth_lookup(auth_username, "username_avp_spec/pwd_avp_spec")		@@-- [func] (h350)
h350_result_call_preferences(avp_name_prefix)		@@-- [func] (h350)
h350_result_service_level(avp_name_prefix)		@@-- [func] (h350)
h350_sipuri_lookup(sip_uri)		@@-- [func] (h350)
handle_publish([sender_uri])		@@-- [func] (presence)
handle_ruri_alias()		@@-- [func] (nathelper)
handle_subscribe([watcher_uri])		@@-- [func] (presence)
has_body(), has_body(mime)		@@-- [func] (textops)
has_credentials(realm)		@@-- [func] (auth)
has_totag()		@@-- [func] (siputils)
hdr_body2attrs(headername, prefix)		@@-- [func] (avp)
hdr_body2attrs2(headername, prefix)		@@-- [func] (avp)
hf_value_exists(hf, hvalue)		@@-- [func] (textopsx)
http_query(url, [post-data], [header-data], result)		@@-- [func] (utils)
imc_manager()		@@-- [func] (imc)
impu_registered(domain)		@@-- [func] (ims_registrar_scscf)
ims_proxy_authenticate(realm, table)		@@-- [func] (ims_auth)
ims_proxy_challenge(route_block, realm, table)		@@-- [func] (ims_auth)
ims_www_authenticate(realm)		@@-- [func] (ims_auth)
ims_www_authorize(realm, table)		@@-- [func] (ims_auth)
ims_www_challenge(route_block, realm)		@@-- [func] (ims_auth)
ims_www_challenge(route_block, realm, algorithm)		@@-- [func] (ims_auth)
inactivate_gw()		@@-- [func] (lcr)
include_hf_value(hf, hvalue)		@@-- [func] (textopsx)
insert_attr_hf(header_name, $avp_name)		@@-- [func] (avp)
insert_attr_hf(name)		@@-- [func] (avp)
insert_hf(txt[, hdr])		@@-- [func] (textops)
insert_hf_value(hf, hvalue)		@@-- [func] (textopsx)
in_list(subject, list, separator)		@@-- [func] (textops)
iptrtpproxy_adjust_timeout(gate_a_to_b, session_ids)		@@-- [func] (iptrtpproxy)
iptrtpproxy_alloc(gate_a_to_b [, existing_sess_ids])		@@-- [func] (iptrtpproxy)
iptrtpproxy_authorize_media()		@@-- [func] (iptrtpproxy)
iptrtpproxy_delete(session_ids)		@@-- [func] (iptrtpproxy)
iptrtpproxy_set_param("(aggregation/switchboard)_by_sip_ip_(a/b)", sip_ip)		@@-- [func] (iptrtpproxy)
iptrtpproxy_set_param("codec_set", value)		@@-- [func] (iptrtpproxy)
iptrtpproxy_set_param("o_addr", value)		@@-- [func] (iptrtpproxy)
iptrtpproxy_set_param("o_name", value)		@@-- [func] (iptrtpproxy)
iptrtpproxy_set_param("protected_session_ids", sess_ids)		@@-- [func] (iptrtpproxy)
iptrtpproxy_set_param("remove_codec_mask", value)		@@-- [func] (iptrtpproxy)
iptrtpproxy_set_param(param, value)		@@-- [func] (iptrtpproxy)
iptrtpproxy_update(gate_a_to_b, session_ids)		@@-- [func] (iptrtpproxy)
ip_type (ip)		@@-- [func] (ipops)
isbflagset(flag [, branch])		@@-- [func] (kex)
isc_from_as(direction)		@@-- [func] (ims_isc)
isc_match_filter(direction,domain)		@@-- [func] (ims_isc)
isc_match_filter_reg(reg_state,domain)		@@-- [func] (ims_isc)
isdsturiset()		@@-- [func] (kex)
isRPDATA()		@@-- [func] (smsops)
issflagset(flag)		@@-- [func] (kex)
is_audio_on_hold()		@@-- [func] (textops)
is_avp_set(name)		@@-- [func] (avpops)
is_direction(dir)		@@-- [func] (rr)
is_domain_local(pseudo_variable)		@@-- [func] (domain)
is_e164(pseudo-variable)		@@-- [func] (siputils)
is_first_hop()		@@-- [func] (siputils)
is_from_gw( type, [flag])		@@-- [func] (drouting)
is_from_gw([type])		@@-- [func] (drouting)
is_from_local()		@@-- [func] (domain)
is_from_user_enum()		@@-- [func] (enum)
is_gflag(flag)		@@-- [func] (cfgutils)
is_gruu([uri])		@@-- [func] (siputils)
is_incoming()		@@-- [func] (corex)
is_int(pvar)		@@-- [func] (pv)
is_in_profile(profile,[value])		@@-- [func] (dialog)
is_in_profile(profile,[value])		@@-- [func] (dialog_ng)
is_in_subnet (ip, subnet)		@@-- [func] (ipops)
is_ip (ip)		@@-- [func] (ipops)
is_ipv4 (ip)		@@-- [func] (ipops)
is_ipv6 (ip)		@@-- [func] (ipops)
is_ipv6_reference (ip)		@@-- [func] (ipops)
is_ip_rfc1918 (ip)		@@-- [func] (ipops)
is_known_dlg()		@@-- [func] (dialog)
is_known_dlg()		@@-- [func] (dialog_ng)
is_leap_year([year])		@@-- [func] (tmrec)
is_local(domain)		@@-- [func] (uid_domain)
is_maxfwd_lt(max_value)		@@-- [func] (maxfwd)
is_method(name)		@@-- [func] (textops)
is_myself(uri)		@@-- [func] (kex)
is_numeric(tval)		@@-- [func] (siputils)
is_peer_verified()		@@-- [func] (tls)
is_present_hf(hf_name)		@@-- [func] (textops)
is_present_hf_re(hf_name_re)		@@-- [func] (textops)
is_privacy(privacy_type)		@@-- [func] (textops)
is_pure_ip (ip)		@@-- [func] (ipops)
is_reply()		@@-- [func] (siputils)
is_request()		@@-- [func] (siputils)
is_rfc1918(ip_address)		@@-- [func] (nathelper)
is_rpid_user_e164()		@@-- [func] (siputils)
is_subscriber(uri, dbtable, flags)		@@-- [func] (auth_db)
is_supported(option)		@@-- [func] (siputils)
is_tel_number(tval)		@@-- [func] (siputils)
is_ugflag(flag_num)		@@-- [func] (uid_gflags)
is_uri_host_local()		@@-- [func] (domain)
is_uri_user_e164(pseudo-variable)		@@-- [func] (siputils)
is_user(username)		@@-- [func] (siputils)
is_user_in(URI, group)		@@-- [func] (group)
i_enum_query(["suffix"[,"service"]])		@@-- [func] (enum)
I_perform_location_information_request(route_block)		@@-- [func] (ims_icscf)
I_perform_user_authorization_request(route_block, capabalities)		@@-- [func] (ims_icscf)
I_scscf_drop()		@@-- [func] (ims_icscf)
I_scscf_select(initial)		@@-- [func] (ims_icscf)
janssonrpc_notification(conn, method, parameters)		@@-- [func] (janssonrpc-c)
janssonrpc_request(conn, method, params[, options]])		@@-- [func] (janssonrpc-c)
jansson_append(type, key/path, value, result)		@@-- [func] (jansson)
jansson_array_size(key/path, src, dst)		@@-- [func] (jansson)
jansson_get(key/path, src, dst)		@@-- [func] (jansson)
jansson_get_field(src, field_name, dst)		@@-- [func] (jansson)
jansson_set(type, key/path, value, result)		@@-- [func] (jansson)
java_method_exec(method, method_signature, [param1[, param2[, ...]]])		@@-- [func] (app_java)
java_staticmethod_exec(method, method_signature, [param1[, param2[, ...]]])		@@-- [func] (app_java)
java_s_method_exec(method, method_signature, [param1[, param2[, ...]]])		@@-- [func] (app_java)
java_s_staticmethod_exec(method, method_signature, [param1[, param2[, ...]]])		@@-- [func] (app_java)
jsonrpc_dispatch()		@@-- [func] (jsonrpc-s)
jsonrpc_exec(cmd)		@@-- [func] (jsonrpc-s)
jsonrpc_notification(method, parameters)		@@-- [func] (jsonrpc-c)
jsonrpc_request(method, parameters, return_route, error_route, result_var)		@@-- [func] (jsonrpc-c)
json_get_field(json_string, field_name, destination)		@@-- [func] (json)
keep_hf([regexp])		@@-- [func] (textopsx)
km_append_branch([uri])		@@-- [func] (kex)
ldap_filter_url_encode(string, avp_spec)		@@-- [func] (ldap)
ldap_result("ldap_attr_name/avp_spec[/avp_type]" [, regex_subst])		@@-- [func] (ldap)
ldap_result_check("ldap_attr_name/string_to_match" [, regex_subst])		@@-- [func] (ldap)
ldap_result_next()		@@-- [func] (ldap)
ldap_search(ldap_url)		@@-- [func] (ldap)
load_attrs (track, id)		@@-- [func] (uid_avp_db)
load_extra_attrs (group_id, id)		@@-- [func] (uid_avp_db)
load_gws(lcr_id[, uri_user[, caller_uri]])		@@-- [func] (lcr)
lock(key)		@@-- [func] (cfgutils)
lock_extra_attrs (group_id, id)		@@-- [func] (uid_avp_db)
log_udp(text)		@@-- [func] (log_custom)
lookup(domain [, uri])		@@-- [func] (registrar)
lookup(domain)		@@-- [func] (ims_registrar_scscf)
lookup_branches(domain)		@@-- [func] (registrar)
lookup_domain(attr_group, domain)		@@-- [func] (uid_domain)
lookup_domain(domain[, prefix])		@@-- [func] (domain)
lookup_path_to_contact(uri)		@@-- [func] (ims_registrar_scscf)
loose_route()		@@-- [func] (rr)
lua_dofile(path)		@@-- [func] (app_lua)
lua_dostring(script)		@@-- [func] (app_lua)
lua_run(function, params)		@@-- [func] (app_lua)
lua_runstring(script)		@@-- [func] (app_lua)
matrix (string first, string second, string dstavp)		@@-- [func] (matrix)
maxfwd_at_least(max_value)		@@-- [func] (maxfwd)
maxfwd_process(max_value)		@@-- [func] (maxfwd)
mf_lowlimit(max_value)		@@-- [func] (maxfwd)
mf_process_maxfwd_header(max_value)		@@-- [func] (maxfwd)
mohq_count (queue_name, pvar)		@@-- [func] (mohqueue)
mohq_process ()		@@-- [func] (mohqueue)
mohq_retrieve (queue_name, URI)		@@-- [func] (mohqueue)
mohq_send (queue_name)		@@-- [func] (mohqueue)
mongodb_cmd(srvname, dbname, cname, command, replyid)		@@-- [func] (ndb_mongodb)
mongodb_cmd_simple(srvname, dbname, cname, command, replyid)		@@-- [func] (ndb_mongodb)
mongodb_find(srvname, dbname, cname, command, replyid)		@@-- [func] (ndb_mongodb)
mongodb_find_one(srvname, dbname, cname, command, replyid)		@@-- [func] (ndb_mongodb)
mongodb_free(replyid)		@@-- [func] (ndb_mongodb)
mongodb_next(replyid)		@@-- [func] (ndb_mongodb)
mono_exec(path [, param])		@@-- [func] (app_mono)
mono_run([param])		@@-- [func] (app_mono)
mq_add(queue, key, value)		@@-- [func] (mqueue)
mq_fetch(queue)		@@-- [func] (mqueue)
mq_pv_free(queue)		@@-- [func] (mqueue)
mq_size(queue)		@@-- [func] (mqueue)
msg_apply_changes()		@@-- [func] (textopsx)
msg_iflag_is_set(flagname)		@@-- [func] (corex)
msg_iflag_reset(flagname)		@@-- [func] (corex)
msg_iflag_set(flagname)		@@-- [func] (corex)
msrp_cmap_lookup()		@@-- [func] (msrp)
msrp_cmap_save()		@@-- [func] (msrp)
msrp_is_reply()		@@-- [func] (msrp)
msrp_is_request()		@@-- [func] (msrp)
msrp_relay()		@@-- [func] (msrp)
msrp_relay_flags(flags)		@@-- [func] (msrp)
msrp_reply(code, text [, hdrs])		@@-- [func] (msrp)
msrp_reply_flags(flags)		@@-- [func] (msrp)
msrp_set_dst(addr, sock)		@@-- [func] (msrp)
mt_match(mtree, pv, mode)		@@-- [func] (mtree)
mt_mem_alloc(size)		@@-- [func] (malloc_test)
mt_mem_free()		@@-- [func] (malloc_test)
m_dump([owner])		@@-- [func] (msilo)
m_store([owner])		@@-- [func] (msilo)
nat_uac_test(flags)		@@-- [func] (nathelper)
next_gw()		@@-- [func] (lcr)
not_empty(pvar)		@@-- [func] (pv)
options_reply()		@@-- [func] (siputils)
pcre_match (string, pcre_regex)		@@-- [func] (regex)
pcre_match_group (string [, group])		@@-- [func] (regex)
pcscf_follows_service_routes(domain)		@@-- [func] (ims_registrar_pcscf)
pcscf_force_service_routes(domain)		@@-- [func] (ims_registrar_pcscf)
pcscf_is_registered(domain)		@@-- [func] (ims_registrar_pcscf)
pcscf_save(domain)		@@-- [func] (ims_registrar_pcscf)
pcscf_save_pending(domain)		@@-- [func] (ims_registrar_pcscf)
pdb_query (string query, string dstavp)		@@-- [func] (pdb)
pd_translate(sdomain, rewrite_mode)		@@-- [func] (pdt)
perl_exec(func, [param])		@@-- [func] (app_perl)
perl_exec_simple(func, [param])		@@-- [func] (app_perl)
pike_check_req()		@@-- [func] (pike)
pkg_status()		@@-- [func] (cfgutils)
pkg_summary()		@@-- [func] (cfgutils)
pl_check(name [, algorithm, limit])		@@-- [func] (pipelimit)
pl_drop([ [min ], max ])		@@-- [func] (pipelimit)
prefix2domain()		@@-- [func] (pdt)
prefix2domain(rewrite_mode)		@@-- [func] (pdt)
prefix2domain(rewrite_mode, multidomain_mode)		@@-- [func] (pdt)
prefix_route([user])		@@-- [func] (prefix_route)
prepareallosproute()		@@-- [func] (osp)
prepareosproute()		@@-- [func] (osp)
pres_auth_status(watcher_uri, presentity_uri)		@@-- [func] (presence)
pres_check_activities(presentity_uri, activity)		@@-- [func] (presence_xml)
pres_check_basic(presentity_uri, status)		@@-- [func] (presence_xml)
pres_refresh_watchers(uri, event, type[, file_uri, filename])		@@-- [func] (presence)
pres_update_watchers(uri, event)		@@-- [func] (presence)
print(txt)		@@-- [func] (print)
print_attr($attribute)		@@-- [func] (avp)
print_stderr(txt)		@@-- [func] (print_lib)
process_maxfwd(max_value)		@@-- [func] (maxfwd)
proxy_authenticate(realm, table)		@@-- [func] (auth_db)
proxy_authorize(realm, table)		@@-- [func] (auth_db)
proxy_authorize(realm, table)		@@-- [func] (uid_auth_db)
proxy_challenge(realm, flags)		@@-- [func] (auth)
pua_set_publish()		@@-- [func] (pua_usrloc)
pua_update_contact()		@@-- [func] (pua)
pua_xmpp_notify()		@@-- [func] (pua_xmpp)
pua_xmpp_req_winfo(request_uri, expires)		@@-- [func] (pua_xmpp)
publish_reg(domain)		@@-- [func] (ims_registrar_scscf)
purple_handle_publish()		@@-- [func] (purple)
purple_handle_subscribe()		@@-- [func] (purple)
purple_send_message()		@@-- [func] (purple)
pv_auth_check(realm, passwd, flags, checks)		@@-- [func] (auth)
pv_isset(pvar)		@@-- [func] (pv)
pv_printf(var, str)		@@-- [func] (kex)
pv_proxy_authenticate(realm, passwd, flags)		@@-- [func] (auth)
pv_unset(pvar)		@@-- [func] (pv)
pv_var_to_xavp(varname, xname)		@@-- [func] (pv)
pv_www_authenticate(realm, passwd, flags [, method])		@@-- [func] (auth)
pv_xavp_print()		@@-- [func] (pv)
pv_xavp_to_var(xname)		@@-- [func] (pv)
python_exec(method [, args])		@@-- [func] (app_python)
radius_does_uri_exist([uri])		@@-- [func] (misc_radius)
radius_does_uri_user_exist([user])		@@-- [func] (misc_radius)
radius_is_user_in(user, group)		@@-- [func] (misc_radius)
radius_load_callee_avps(callee)		@@-- [func] (misc_radius)
radius_load_caller_avps(caller)		@@-- [func] (misc_radius)
radius_proxy_authorize(realm [, uri_user])		@@-- [func] (auth_radius)
radius_www_authorize(realm [, uri_user])		@@-- [func] (auth_radius)
rand_event()		@@-- [func] (cfgutils)
rand_get_prob()		@@-- [func] (cfgutils)
rand_reset_prob()		@@-- [func] (cfgutils)
rand_set_prob(probabiltiy)		@@-- [func] (cfgutils)
record_route() and record_route(string)		@@-- [func] (rr)
record_route_advertised_address(address)		@@-- [func] (rr)
record_route_preset(string [,string2])		@@-- [func] (rr)
redis_cmd(srvname, command, ..., replyid)		@@-- [func] (ndb_redis)
redis_free(replyid)		@@-- [func] (ndb_redis)
reginfo_handle_notify(uldomain)		@@-- [func] (pua_reginfo)
reginfo_subscribe(uri[, expires])		@@-- [func] (pua_reginfo)
registered(domain [, uri [, match_option [, match_action]]])		@@-- [func] (registrar)
reg_fetch_contacts(domain, uri, profile)		@@-- [func] (ims_registrar_scscf)
reg_fetch_contacts(domain, uri, profile)		@@-- [func] (registrar)
reg_free_contacts(profile)		@@-- [func] (ims_registrar_scscf)
reg_free_contacts(profile)		@@-- [func] (registrar)
remove_body()		@@-- [func] (textopsx)
remove_body_part(content_type)		@@-- [func] (textops)
remove_extra_attrs (group_id, id)		@@-- [func] (uid_avp_db)
remove_hf(hname)		@@-- [func] (textops)
remove_hf_re(re)		@@-- [func] (textops)
remove_hf_value(hf_par)		@@-- [func] (textopsx)
remove_hf_value2(hf_par)		@@-- [func] (textopsx)
remove_record_route()		@@-- [func] (rr)
replace(re, txt)		@@-- [func] (textops)
replace_all(re, txt)		@@-- [func] (textops)
replace_attr_hf(header_name, $avp_name)		@@-- [func] (avp)
replace_attr_hf(name)		@@-- [func] (avp)
replace_body(re, txt)		@@-- [func] (textops)
replace_body_all(re, txt)		@@-- [func] (textops)
replace_body_atonce(re, txt)		@@-- [func] (textops)
reportospusage()		@@-- [func] (osp)
requestosprouting()		@@-- [func] (osp)
resetbflag(flag [, branch])		@@-- [func] (kex)
resetdebug()		@@-- [func] (kex)
resetdsturi()		@@-- [func] (kex)
resetsflag(flag)		@@-- [func] (kex)
reset_gflag(flag)		@@-- [func] (cfgutils)
reset_stat(variable)		@@-- [func] (statistics)
reset_ugflag(flag_num)		@@-- [func] (uid_gflags)
ring_insert_callid()		@@-- [func] (siputils)
rls_handle_notify()		@@-- [func] (rls)
rls_handle_subscribe([watcher_uri])		@@-- [func] (rls)
rls_update_subs(uri, event)		@@-- [func] (rls)
rl_check([pvar])		@@-- [func] (ratelimit)
rl_check_pipe([pipe_no])		@@-- [func] (ratelimit)
route_if_exists(route)		@@-- [func] (cfgutils)
Ro_CCR(route_name, direction, reservation_units, domain, incoming_trunk_id, outgoing_trunk_id		@@-- [func] (ims_charging)
Ro_set_session_id_avp()		@@-- [func] (ims_charging)
rtjson_init_routes(rtdoc)		@@-- [func] (rtjson)
rtjson_next_route()		@@-- [func] (rtjson)
rtjson_push_routes()		@@-- [func] (rtjson)
rtjson_update_branch()		@@-- [func] (rtjson)
rtpengine_answer([flags])		@@-- [func] (rtpengine)
rtpengine_delete([flags])		@@-- [func] (rtpengine)
rtpengine_manage([flags])		@@-- [func] (rtpengine)
rtpengine_offer([flags])		@@-- [func] (rtpengine)
rtpproxy_answer([flags [, ip_address]])		@@-- [func] (rtpproxy)
rtpproxy_destroy([flags])		@@-- [func] (rtpproxy)
rtpproxy_manage([flags [, ip_address]])		@@-- [func] (rtpproxy)
rtpproxy_offer([flags [, ip_address]])		@@-- [func] (rtpproxy)
rtpproxy_stop_stream2uac(),		@@-- [func] (rtpproxy)
rtpproxy_stop_stream2uas(prompt_name, count)		@@-- [func] (rtpproxy)
rtpproxy_stream2uac(prompt_name, count),		@@-- [func] (rtpproxy)
rtpproxy_stream2uas(prompt_name, count)		@@-- [func] (rtpproxy)
Rx_AAR(route_block, direction, subscription_id, subscription_id_type)		@@-- [func] (ims_qos)
Rx_AAR_Register(route_block, domain)		@@-- [func] (ims_qos)
sanity_check([msg_checks [, uri_checks]])		@@-- [func] (sanity)
save(async_reply_route, domain)		@@-- [func] (ims_registrar_scscf)
save(domain, [, flags [, uri]])		@@-- [func] (registrar)
save_extra_attrs (group_id, id)		@@-- [func] (uid_avp_db)
sbranch_append()		@@-- [func] (pv)
sbranch_reset()		@@-- [func] (pv)
sbranch_set_ruri()		@@-- [func] (pv)
sca_call_info_update()		@@-- [func] (sca)
sca_handle_subscribe()		@@-- [func] (sca)
sdp_content([sloppy])		@@-- [func] (sdpops)
sdp_get(avpvar)		@@-- [func] (sdpops)
sdp_get_line_startswith(avpvar, string)		@@-- [func] (sdpops)
sdp_keep_codecs_by_id(list [, mtype])		@@-- [func] (sdpops)
sdp_keep_codecs_by_name(list [, mtype])		@@-- [func] (sdpops)
sdp_mangle_ip(pattern, newip)		@@-- [func] (mangler)
sdp_mangle_port(offset)		@@-- [func] (mangler)
sdp_print(level)		@@-- [func] (sdpops)
sdp_remove_codecs_by_id(list)		@@-- [func] (sdpops)
sdp_remove_codecs_by_name(list)		@@-- [func] (sdpops)
sdp_remove_line_by_prefix(string)		@@-- [func] (sdpops)
sdp_remove_media(type)		@@-- [func] (sdpops)
sdp_remove_transport(type)		@@-- [func] (sdpops)
sdp_transport(pv)		@@-- [func] (sdpops)
sdp_with_active_media(type)		@@-- [func] (sdpops)
sdp_with_codecs_by_id(list)		@@-- [func] (sdpops)
sdp_with_codecs_by_name(list)		@@-- [func] (sdpops)
sdp_with_ice()		@@-- [func] (sdpops)
sdp_with_media(type)		@@-- [func] (sdpops)
sdp_with_transport(type)		@@-- [func] (sdpops)
sdp_with_transport_like(string)		@@-- [func] (sdpops)
sd_journal_print(level, text)		@@-- [func] (log_systemd)
sd_lookup(table [, owner])		@@-- [func] (speeddial)
search(re)		@@-- [func] (textops)
search_append(re, txt)		@@-- [func] (textops)
search_append_body(re, txt)		@@-- [func] (textops)
search_body(re)		@@-- [func] (textops)
search_hf(hf, re, flags)		@@-- [func] (textops)
send([ host [ :port ] ])		@@-- [func] (corex)
send_data(uri, data)		@@-- [func] (corex)
send_reply(code, reason)		@@-- [func] (sl)
send_tcp([ host [ :port ] ])		@@-- [func] (corex)
setbflag(flag [, branch])		@@-- [func] (kex)
setdebug(level)		@@-- [func] (kex)
setdsturi(uri)		@@-- [func] (kex)
setsflag(flag)		@@-- [func] (kex)
set_accept_filter(filter,flags)		@@-- [func] (uac_redirect)
set_body(txt,content_type)		@@-- [func] (textops)
set_body_multipart([txt,content_type][,boundary])		@@-- [func] (textops)
set_contact_alias()		@@-- [func] (nathelper)
set_deny_filter(filter,flags)		@@-- [func] (uac_redirect)
set_dlg_profile(profile,[value])		@@-- [func] (dialog)
set_dlg_profile(profile,[value])		@@-- [func] (dialog_ng)
set_gflag(flag)		@@-- [func] (cfgutils)
set_gflag(flag_num)		@@-- [func] (uid_gflags)
set_iattr(attribute,value)		@@-- [func] (avp)
set_reply_body(txt,content_type)		@@-- [func] (textops)
set_rtpengine_set(setid[, setid])		@@-- [func] (rtpengine)
set_rtp_proxy_set(setid)		@@-- [func] (rtpproxy)
set_sattr(attribute,value)		@@-- [func] (avp)
set_uri_host(uri, host)		@@-- [func] (siputils)
set_uri_user(uri, user)		@@-- [func] (siputils)
shm_status()		@@-- [func] (cfgutils)
shm_summary()		@@-- [func] (cfgutils)
sht_iterator_end(iname)		@@-- [func] (htable)
sht_iterator_next(iname)		@@-- [func] (htable)
sht_iterator_start(iname, hname)		@@-- [func] (htable)
sht_lock(htable=&gt;key)		@@-- [func] (htable)
sht_print()		@@-- [func] (htable)
sht_reset(htable)		@@-- [func] (htable)
sht_rm_name_re(htable=&gt;regexp)		@@-- [func] (htable)
sht_rm_value_re(htable=&gt;regexp)		@@-- [func] (htable)
sht_unlock(htable=&gt;key)		@@-- [func] (htable)
sipt_destination(destination, hops, nai)		@@-- [func] (sipt)
sipt_set_bci_1(charge_indicator, called_status, called_category, e2e_indicator)		@@-- [func] (sipt)
sipt_set_calling(origin, nai, presentation, screening)		@@-- [func] (sipt)
sip_trace([address])		@@-- [func] (siptrace)
sleep(time)		@@-- [func] (cfgutils)
sl_forward _reply([ code, [ reason ] ])		@@-- [func] (sl)
sl_reply_error()		@@-- [func] (sl)
sl_send_reply(code, reason)		@@-- [func] (sl)
smsdump()		@@-- [func] (smsops)
sms_send_msg()		@@-- [func] (sms)
sms_send_msg_to_net(network_name)		@@-- [func] (sms)
sql_pvquery(connection, query, result)		@@-- [func] (sqlops)
sql_query(connection, query[, result])		@@-- [func] (sqlops)
sql_query_async(connection, query)		@@-- [func] (sqlops)
sql_result_free(result)		@@-- [func] (sqlops)
sql_xquery(connection, query, result)		@@-- [func] (sqlops)
srv_query(srvcname, pvid)		@@-- [func] (ipops)
sstCheckMin(send_reply_flag)		@@-- [func] (sst)
starts_with(str1, str2)		@@-- [func] (textops)
start_recording()		@@-- [func] (rtpengine)
start_recording()		@@-- [func] (rtpproxy)
statsd_decr(key)		@@-- [func] (statsd)
statsd_gauge(key, value)		@@-- [func] (statsd)
statsd_incr(key)		@@-- [func] (statsd)
statsd_set(key, value)		@@-- [func] (statsd)
statsd_start(key)		@@-- [func] (statsd)
statsd_stop(key)		@@-- [func] (statsd)
subscribe_to_reg(domain)		@@-- [func] (ims_registrar_scscf)
subst('/re/repl/flags')		@@-- [func] (textops)
subst_attr($avp_name, subst_re)		@@-- [func] (avp)
subst_body('/re/repl/flags')		@@-- [func] (textops)
subst_hf(hf, subexp, flags)		@@-- [func] (textops)
subst_uri('/re/repl/flags')		@@-- [func] (textops)
subst_user('/re/repl/flags')		@@-- [func] (textops)
tcp_conid_alive(conid)		@@-- [func] (tcpops)
tcp_conid_state(conid)		@@-- [func] (tcpops)
tcp_keepalive_disable([conid])		@@-- [func] (tcpops)
tcp_keepalive_enable([conid], idle, count, interval)		@@-- [func] (tcpops)
tcp_set_connection_lifetime([conid], lifetime)		@@-- [func] (tcpops)
tel2sip(uri, hostpart, result)		@@-- [func] (siputils)
term_impu_registered(domain)		@@-- [func] (ims_registrar_scscf)
time_period_match(period [, timestamp])		@@-- [func] (tmrec)
tmrec_match(timerec [, timestamp])		@@-- [func] (tmrec)
to_any_gw([ip_addr, proto])		@@-- [func] (lcr)
to_gw(lcr_id[, ip_addr, proto])		@@-- [func] (lcr)
ts_append(domain, ruri)		@@-- [func] (tsilo)
ts_append_to(tindex, tlabel, domain, [uri])		@@-- [func] (tsilo)
ts_store([uri])		@@-- [func] (tsilo)
typeof(pvar, vtype)		@@-- [func] (pv)
t_any_replied()		@@-- [func] (tm)
t_any_timeout()		@@-- [func] (tm)
t_branch_replied()		@@-- [func] (tm)
t_branch_timeout()		@@-- [func] (tm)
t_cancel_branches(which)		@@-- [func] (tmx)
t_cancel_callid(callid, cseq, flag [, rcode])		@@-- [func] (tmx)
t_check_status(re)		@@-- [func] (tm)
t_check_trans()		@@-- [func] (tm)
t_continue(tindex, tlabel, rtname)		@@-- [func] (tmx)
t_drop_replies([mode])		@@-- [func] (tm)
t_flush_flags()		@@-- [func] (tmx)
t_forward_nonack([ip, port])		@@-- [func] (tm)
t_forward_nonack_sctp(ip, port)		@@-- [func] (tm)
t_forward_nonack_tcp(ip, port)		@@-- [func] (tm)
t_forward_nonack_tls(ip, port)		@@-- [func] (tm)
t_forward_nonack_udp(ip, port)		@@-- [func] (tm)
t_grep_status("code")		@@-- [func] (tm)
t_is_branch_route()		@@-- [func] (tmx)
t_is_canceled()		@@-- [func] (tm)
t_is_expired()		@@-- [func] (tm)
t_is_failure_route()		@@-- [func] (tmx)
t_is_reply_route()		@@-- [func] (tmx)
t_is_retr_async_reply()		@@-- [func] (tm)
t_is_set(target)		@@-- [func] (tm)
t_load_contacts()		@@-- [func] (tm)
t_lookup_cancel([1])		@@-- [func] (tm)
t_lookup_request()		@@-- [func] (tm)
t_newtran()		@@-- [func] (tm)
t_next_contacts()		@@-- [func] (tm)
t_next_contact_flow()		@@-- [func] (tm)
t_on_branch(branch_route)		@@-- [func] (tm)
t_on_branch_failure(branch_failure_route)		@@-- [func] (tm)
t_on_failure(failure_route)		@@-- [func] (tm)
t_on_reply(onreply_route)		@@-- [func] (tm)
t_precheck_trans()		@@-- [func] (tmx)
t_relay([host, port])		@@-- [func] (tm)
t_relay_cancel()		@@-- [func] (tm)
t_relay_to(proxy, flags)		@@-- [func] (tm)
t_relay_to_sctp([ip, port])		@@-- [func] (tm)
t_relay_to_tcp([ip, port])		@@-- [func] (tm)
t_relay_to_tls([ip, port])		@@-- [func] (tm)
t_relay_to_udp([ip, port])		@@-- [func] (tm)
t_release()		@@-- [func] (tm)
t_replicate([params])		@@-- [func] (tm)
t_reply(code, reason_phrase)		@@-- [func] (tm)
t_reply_callid(callid, cseq, code, reason)		@@-- [func] (tmx)
t_reset_fr()		@@-- [func] (tm)
t_reset_max_lifetime()		@@-- [func] (tm)
t_reset_retr()		@@-- [func] (tm)
t_retransmit_reply()		@@-- [func] (tm)
t_reuse_branch()		@@-- [func] (tmx)
t_save_lumps()		@@-- [func] (tm)
t_set_auto_inv_100(0|1)		@@-- [func] (tm)
t_set_disable_6xx(0|1)		@@-- [func] (tm)
t_set_disable_failover(0|1)		@@-- [func] (tm)
t_set_disable_internal_reply(0|1)		@@-- [func] (tm)
t_set_fr(fr_inv_timeout [, fr_timeout])		@@-- [func] (tm)
t_set_max_lifetime(inv_lifetime, noninv_lifetime)		@@-- [func] (tm)
t_set_no_e2e_cancel_reason(0|1)		@@-- [func] (tm)
t_set_retr(retr_t1_interval, retr_t2_interval)		@@-- [func] (tm)
t_suspend()		@@-- [func] (tmx)
t_use_uac_headers()		@@-- [func] (tm)
uac_auth()		@@-- [func] (uac)
uac_reg_lookup(uuid, dst)		@@-- [func] (uac)
uac_reg_request_to(user, mode)		@@-- [func] (uac)
uac_replace_from(display,uri)		@@-- [func] (uac)
uac_replace_from(uri)		@@-- [func] (uac)
uac_replace_to(display,uri)		@@-- [func] (uac)
uac_replace_to(uri)		@@-- [func] (uac)
uac_req_send()		@@-- [func] (uac)
uac_restore_from()		@@-- [func] (uac)
uac_restore_to()		@@-- [func] (uac)
unforce_rtp_proxy()		@@-- [func] (rtpproxy)
unlock(key)		@@-- [func] (cfgutils)
unlock_extra_attrs (group_id, id)		@@-- [func] (uid_avp_db)
unregister(domain)		@@-- [func] (ims_registrar_scscf)
unregister(domain, uri[, ruid])		@@-- [func] (registrar)
unset_dlg_profile(profile,[value])		@@-- [func] (dialog)
unset_dlg_profile(profile,[value])		@@-- [func] (dialog_ng)
update_stat(variable,value)		@@-- [func] (statistics)
uri_param(param)		@@-- [func] (siputils)
uri_param(param,value)		@@-- [func] (siputils)
use_media_proxy()		@@-- [func] (mediaproxy)
use_next_gw()/next_routing()		@@-- [func] (drouting)
usleep(time)		@@-- [func] (cfgutils)
validateospheader()		@@-- [func] (osp)
verify_destination()		@@-- [func] (peering)
verify_source()		@@-- [func] (peering)
vrfy_check_callid()		@@-- [func] (auth_identity)
vrfy_check_certificate()		@@-- [func] (auth_identity)
vrfy_check_date()		@@-- [func] (auth_identity)
vrfy_check_msgvalidity()		@@-- [func] (auth_identity)
vrfy_get_certificate()		@@-- [func] (auth_identity)
ws_close([status, reason[, connection_id]])		@@-- [func] (websocket)
ws_handle_handshake()		@@-- [func] (websocket)
www_authenticate(realm, table [, method])		@@-- [func] (auth_db)
www_authorize(realm, table)		@@-- [func] (auth_db)
www_authorize(realm, table)		@@-- [func] (uid_auth_db)
www_challenge(realm, flags)		@@-- [func] (auth)
xalert(format)		@@-- [func] (xlog)
xavp_params_explode(sparams, xname)		@@-- [func] (pv)
xbug(format)		@@-- [func] (xlog)
xcaps_del(uri, path)		@@-- [func] (xcap_server)
xcaps_get(uri, path)		@@-- [func] (xcap_server)
xcaps_put(uri, path, doc)		@@-- [func] (xcap_server)
xcap_auth_status(watcher_uri, presentity_uri)		@@-- [func] (utils)
xcrit(format)		@@-- [func] (xlog)
xdbg(format)		@@-- [func] (xlog)
xdbgl(format)		@@-- [func] (xlog)
xerr(format)		@@-- [func] (xlog)
xhttp_reply(code, reason, ctype, body)		@@-- [func] (xhttp)
xinfo(format)		@@-- [func] (xlog)
xlfix_attr($attribute)		@@-- [func] (avp)
xlog([ [facility,] level,] format)		@@-- [func] (xlog)
xlogl([ [facility,] level,] format)		@@-- [func] (xlog)
xlogm(level, format)		@@-- [func] (xlog)
xlset_attr($attribute, xl_format)		@@-- [func] (avp)
xlset_destination(xl_format)		@@-- [func] (avp)
xmlrpc_reply(code, reason)		@@-- [func] (xmlrpc)
xmpp_send_message()		@@-- [func] (xmpp)
xnotice(format)		@@-- [func] (xlog)
xpdbg(format)		@@-- [func] (xprint)
xplog(level, format)		@@-- [func] (xprint)
xwarn(format)		@@-- [func] (xlog)
